// This is recursive Dp code of Sherlock and Cost | Hackerrank
// Code by Abhinav Bhatt (IIIT Sonepat)

#include <bits/stdc++.h>
using namespace std;
#define int long long
#define w(x)    int x; cin>>x; while(x--)
#define pi (3.141592653589)
#define mod 1000000007
#define int long long
#define float double
#define endl "\n"
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define mii             map<int,int>
#define msi          map<string,int>
#define vi               vector<int>
#define vs            vector<string>
#define si                  set<int>

int dp[200000][3];// Because in this question current position and next value of the vector v is dp state.
vi v(200000);
int helper(int i,int n,int num)
{
  if(i>=n-1)
  return 0;
  int &ans=dp[i][num];
  if(dp[i][num]!=-1)
  return ans;
  //if num==0  This means we are taking next value of the vector same as given to us. 
  // if num==1 This means we are taking next value of the vector as 1.
  if(i==0)// This is the first call where we are given taking both the options for first value. ie. either to take it as one or to take it as same.
  {
    return ans=max(abs(1-v[i+1])+helper(i+1,n,1),abs(v[i]-1)+helper(i+1,n,0));
  }
  if(num)
  {
    return ans=max(abs(v[i]-v[i+1])+helper(i+1,n,1),abs(v[i]-1)+helper(i+1,n,0));
  }
  else
  {
    return ans=max(abs(1-v[i+1])+helper(i+1,n,1),abs(1-1)+helper(i+1,n,0));
  }
}

void solve()
{
  int i,n;
  cin>>n;
  memset(dp,-1,sizeof dp);
  for(i=0;i<n;i++)
  cin>>v[i];
  memset(dp,-1,sizeof dp);
  cout<<helper(0,n,0)<<endl;
  return ;
}


int32_t main()
{
ios_base::sync_with_stdio(false);
cin.tie(NULL);

  w(x)
     {
solve();
 }
return 0;
}
